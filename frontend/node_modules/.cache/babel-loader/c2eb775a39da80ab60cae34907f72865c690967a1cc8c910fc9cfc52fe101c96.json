{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus VivoBook F1605P\\\\Desktop\\\\projet_k8s\\\\mongo-express-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from \"react\";\nimport \"./App.css\";\nimport PrayerForm from \"./PrayerForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [prayers, setPrayers] = useState(null);\n  const [allCities, setAllCities] = useState([]);\n  const [selectedCityId, setSelectedCityId] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(\"\");\n  const [activeTime, setActiveTime] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [theme, setTheme] = useState(\"light\");\n  const [showForm, setShowForm] = useState(false);\n  const [nextPrayerName, setNextPrayerName] = useState(\"\"); // Add this to track next prayer name\n\n  // Use useRef to store the interval ID so we can clear it\n  const countdownIntervalRef = useRef(null);\n  const fetchCities = useCallback(() => {\n    setLoading(true);\n    setError(null);\n    fetch(\"http://saad.local/api/prayers\").then(res => {\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch prayer times\");\n      }\n      return res.json();\n    }).then(data => {\n      if (Array.isArray(data) && data.length > 0) {\n        // Extract unique cities from the prayer data\n        const uniqueCities = data.reduce((acc, prayer) => {\n          const cityExists = acc.some(city => city.id === prayer.id && city.city === prayer.city);\n          if (!cityExists) {\n            acc.push({\n              id: prayer.id,\n              city: prayer.city,\n              country: prayer.country\n            });\n          }\n          return acc;\n        }, []);\n        setAllCities(uniqueCities);\n\n        // Set the first city as default if no city is selected\n        if (!selectedCityId && uniqueCities.length > 0) {\n          setSelectedCityId(uniqueCities[0].id);\n          fetchPrayerTimesForCity(uniqueCities[0].id);\n        } else {\n          fetchPrayerTimesForCity(selectedCityId);\n        }\n      } else {\n        throw new Error(\"No prayer data available\");\n      }\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"API Error:\", err);\n      setError(err.message);\n      setLoading(false);\n    });\n  }, [selectedCityId]);\n\n  // Fetch all prayers (fallback if cities endpoint fails)\n  const fetchAllPrayers = useCallback(() => {\n    setLoading(true);\n    setError(null);\n    fetch(\"http://saad.local/api/prayers\").then(res => {\n      if (!res.ok) {\n        throw new Error('Failed to fetch prayer times');\n      }\n      return res.json();\n    }).then(data => {\n      if (Array.isArray(data) && data.length > 0) {\n        const prayerData = data[0];\n        const formattedPrayers = {\n          city: prayerData.city,\n          country: prayerData.country,\n          prayers: {\n            Fajr: formatTime(prayerData.fajr),\n            Dhuhr: formatTime(prayerData.dhuhr),\n            Asr: formatTime(prayerData.asr),\n            Maghrib: formatTime(prayerData.maghrib),\n            Isha: formatTime(prayerData.isha)\n          }\n        };\n        setPrayers(formattedPrayers);\n        const nextPrayer = determineNextPrayer(formattedPrayers.prayers);\n        if (nextPrayer) {\n          setActiveTime(nextPrayer.name);\n          setNextPrayerName(nextPrayer.name);\n          updateCountdown(formattedPrayers.prayers[nextPrayer.name]);\n        }\n      } else {\n        throw new Error(\"No prayer data available\");\n      }\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"API Error:\", err);\n      setError(err.message);\n      setLoading(false);\n    });\n  }, []);\n\n  // Fetch prayer times for a specific city\n  const fetchPrayerTimesForCity = useCallback(cityId => {\n    if (!cityId) return;\n    setLoading(true);\n    setError(null);\n    fetch(`http://saad.local/api/prayers/${cityId}`).then(res => {\n      if (!res.ok) {\n        throw new Error('Failed to fetch prayer times for this city');\n      }\n      return res.json();\n    }).then(prayerData => {\n      if (prayerData) {\n        const formattedPrayers = {\n          city: prayerData.city,\n          country: prayerData.country,\n          prayers: {\n            Fajr: formatTime(prayerData.fajr),\n            Dhuhr: formatTime(prayerData.dhuhr),\n            Asr: formatTime(prayerData.asr),\n            Maghrib: formatTime(prayerData.maghrib),\n            Isha: formatTime(prayerData.isha)\n          }\n        };\n        setPrayers(formattedPrayers);\n\n        // Get the next prayer time\n        const nextPrayer = determineNextPrayer(formattedPrayers.prayers);\n        if (nextPrayer) {\n          setActiveTime(nextPrayer.name);\n          setNextPrayerName(nextPrayer.name);\n          updateCountdown(formattedPrayers.prayers[nextPrayer.name]);\n        }\n      } else {\n        throw new Error(\"Invalid data format received\");\n      }\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"API Error:\", err);\n      setError(err.message);\n      setLoading(false);\n    });\n  }, []);\n  useEffect(() => {\n    fetchCities();\n    document.body.className = theme;\n\n    // Clear interval when component unmounts\n    return () => {\n      if (countdownIntervalRef.current) {\n        clearInterval(countdownIntervalRef.current);\n      }\n      document.body.className = \"\";\n    };\n  }, [theme, fetchCities]);\n\n  // Format time from \"HH:MM:SS\" to \"HH:MM\"\n  const formatTime = timeString => {\n    if (!timeString) return \"\";\n    if (timeString.includes(\":\")) {\n      const parts = timeString.split(\":\");\n      if (parts.length >= 2) {\n        return `${parts[0]}:${parts[1]}`;\n      }\n    }\n    return timeString;\n  };\n\n  // Determine the next prayer time\n  const determineNextPrayer = prayerTimes => {\n    if (!prayerTimes) return null;\n    const now = new Date();\n    const currentHour = now.getHours();\n    const currentMinute = now.getMinutes();\n    const currentTime = currentHour * 60 + currentMinute;\n    let nextPrayer = null;\n    let minDiff = Infinity;\n    for (const [name, time] of Object.entries(prayerTimes)) {\n      if (!time || typeof time !== 'string') continue;\n      const parts = time.split(\":\");\n      if (parts.length < 2) continue;\n      const [hour, minute] = parts.map(Number);\n      if (isNaN(hour) || isNaN(minute)) continue;\n      const prayerTime = hour * 60 + minute;\n      let diff = prayerTime - currentTime;\n      if (diff < 0) {\n        diff += 24 * 60;\n      }\n      if (diff < minDiff) {\n        minDiff = diff;\n        nextPrayer = {\n          name,\n          time\n        };\n      }\n    }\n    return nextPrayer;\n  };\n\n  // Updated countdown function that clears previous intervals\n  const updateCountdown = nextPrayerTime => {\n    if (!nextPrayerTime) return;\n\n    // Clear any existing interval\n    if (countdownIntervalRef.current) {\n      clearInterval(countdownIntervalRef.current);\n    }\n\n    // Start a new interval\n    countdownIntervalRef.current = setInterval(() => {\n      const now = new Date();\n      const prayerTime = new Date();\n      const parts = nextPrayerTime.split(\":\");\n      if (parts.length < 2) {\n        setTimeLeft(\"Invalid time format\");\n        clearInterval(countdownIntervalRef.current);\n        return;\n      }\n      const [hour, minute] = parts.map(Number);\n      if (isNaN(hour) || isNaN(minute)) {\n        setTimeLeft(\"Invalid time values\");\n        clearInterval(countdownIntervalRef.current);\n        return;\n      }\n      prayerTime.setHours(hour, minute, 0, 0);\n\n      // If the prayer time is earlier today, it means it's for tomorrow\n      if (prayerTime < now) {\n        prayerTime.setDate(prayerTime.getDate() + 1);\n      }\n      const diff = prayerTime - now;\n      if (diff <= 0) {\n        setTimeLeft(\"Prayer time!\");\n\n        // Recalculate next prayer time after current one is reached\n        if (prayers) {\n          const nextPrayer = determineNextPrayer(prayers.prayers);\n          if (nextPrayer) {\n            setActiveTime(nextPrayer.name);\n            setNextPrayerName(nextPrayer.name);\n            updateCountdown(prayers.prayers[nextPrayer.name]);\n          }\n        }\n      } else {\n        const hours = Math.floor(diff / (1000 * 60 * 60));\n        const minutes = Math.floor(diff / (1000 * 60) % 60);\n        const seconds = Math.floor(diff / 1000 % 60);\n        setTimeLeft(`${hours}h ${minutes}m ${seconds}s`);\n      }\n    }, 1000);\n  };\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n  const refreshData = () => {\n    fetchCities();\n  };\n\n  // Modify the handlePrayerAdded function to ensure proper refresh\n  const handlePrayerAdded = () => {\n    setShowForm(false); // Hide the form\n\n    // Add a small delay to ensure the backend has updated\n    setTimeout(() => {\n      fetchCities(); // Refresh the cities list\n    }, 500);\n  };\n\n  // Toggle form visibility\n  const toggleForm = () => {\n    setShowForm(!showForm);\n  };\n\n  // Handle city selection change\n  const handleCityChange = e => {\n    const cityId = parseInt(e.target.value);\n    setSelectedCityId(cityId);\n    fetchPrayerTimesForCity(cityId);\n  };\n  if (loading && !prayers) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading prayer times...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this);\n  }\n  if (error && !prayers) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: refreshData,\n        className: \"refresh-btn\",\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${theme}`,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ramadan Prayer Times\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleForm,\n          className: \"form-toggle-btn\",\n          children: showForm ? \"Hide Form\" : \"Add Prayer Times\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: refreshData,\n          className: \"refresh-btn\",\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleTheme,\n          className: \"theme-btn\",\n          children: theme === \"light\" ? \"Dark Mode\" : \"Light Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: /*#__PURE__*/_jsxDEV(PrayerForm, {\n        onPrayerAdded: handlePrayerAdded,\n        onCancel: () => setShowForm(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 9\n    }, this), allCities.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"city-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city-select\",\n        children: \"Select City: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"city-select\",\n        value: selectedCityId || \"\",\n        onChange: handleCityChange,\n        className: \"city-dropdown\",\n        children: allCities.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: city.id,\n          children: [city.city, \", \", city.country]\n        }, city.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }, this), prayers && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [prayers.city, \", \", prayers.country]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"date\",\n          children: new Date().toLocaleDateString(\"en-US\", {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"iftar-countdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Time until \", nextPrayerName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-display\",\n          children: timeLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prayer-times-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Prayer Times\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prayer-times\",\n          children: prayers && prayers.prayers && Object.entries(prayers.prayers).map(([name, time]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `prayer-time-card ${name === activeTime ? \"active\" : \"\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"prayer-name\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"prayer-time\",\n              children: time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 21\n            }, this)]\n          }, name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Ramadan Mubarak! \\uD83C\\uDF19\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6+BqRNSsj+cClAjUqnF+KCH7HSI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","PrayerForm","jsxDEV","_jsxDEV","App","_s","prayers","setPrayers","allCities","setAllCities","selectedCityId","setSelectedCityId","timeLeft","setTimeLeft","activeTime","setActiveTime","loading","setLoading","error","setError","theme","setTheme","showForm","setShowForm","nextPrayerName","setNextPrayerName","countdownIntervalRef","fetchCities","fetch","then","res","ok","Error","json","data","Array","isArray","length","uniqueCities","reduce","acc","prayer","cityExists","some","city","id","push","country","fetchPrayerTimesForCity","catch","err","console","message","fetchAllPrayers","prayerData","formattedPrayers","Fajr","formatTime","fajr","Dhuhr","dhuhr","Asr","asr","Maghrib","maghrib","Isha","isha","nextPrayer","determineNextPrayer","name","updateCountdown","cityId","document","body","className","current","clearInterval","timeString","includes","parts","split","prayerTimes","now","Date","currentHour","getHours","currentMinute","getMinutes","currentTime","minDiff","Infinity","time","Object","entries","hour","minute","map","Number","isNaN","prayerTime","diff","nextPrayerTime","setInterval","setHours","setDate","getDate","hours","Math","floor","minutes","seconds","toggleTheme","refreshData","handlePrayerAdded","setTimeout","toggleForm","handleCityChange","e","parseInt","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onPrayerAdded","onCancel","htmlFor","onChange","toLocaleDateString","weekday","year","month","day","_c","$RefreshReg$"],"sources":["C:/Users/Asus VivoBook F1605P/Desktop/projet_k8s/mongo-express-app/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from \"react\";\nimport \"./App.css\";\nimport PrayerForm from \"./PrayerForm\";\n\nfunction App() {\n  const [prayers, setPrayers] = useState(null);\n  const [allCities, setAllCities] = useState([]);\n  const [selectedCityId, setSelectedCityId] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(\"\");\n  const [activeTime, setActiveTime] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [theme, setTheme] = useState(\"light\");\n  const [showForm, setShowForm] = useState(false);\n  const [nextPrayerName, setNextPrayerName] = useState(\"\"); // Add this to track next prayer name\n  \n  // Use useRef to store the interval ID so we can clear it\n  const countdownIntervalRef = useRef(null);\n\n  const fetchCities = useCallback(() => {\n    setLoading(true);\n    setError(null);\n  \n    fetch(\"http://saad.local/api/prayers\")\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"Failed to fetch prayer times\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        if (Array.isArray(data) && data.length > 0) {\n          // Extract unique cities from the prayer data\n          const uniqueCities = data.reduce((acc, prayer) => {\n            const cityExists = acc.some(\n              (city) => city.id === prayer.id && city.city === prayer.city\n            );\n            if (!cityExists) {\n              acc.push({\n                id: prayer.id,\n                city: prayer.city,\n                country: prayer.country,\n              });\n            }\n            return acc;\n          }, []);\n  \n          setAllCities(uniqueCities);\n  \n          // Set the first city as default if no city is selected\n          if (!selectedCityId && uniqueCities.length > 0) {\n            setSelectedCityId(uniqueCities[0].id);\n            fetchPrayerTimesForCity(uniqueCities[0].id);\n          } else {\n            fetchPrayerTimesForCity(selectedCityId);\n          }\n        } else {\n          throw new Error(\"No prayer data available\");\n        }\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.error(\"API Error:\", err);\n        setError(err.message);\n        setLoading(false);\n      });\n  }, [selectedCityId]); \n\n  // Fetch all prayers (fallback if cities endpoint fails)\n  const fetchAllPrayers = useCallback(() => {\n    setLoading(true);\n    setError(null);\n    \n    fetch(\"http://saad.local/api/prayers\")\n      .then(res => {\n        if (!res.ok) {\n          throw new Error('Failed to fetch prayer times');\n        }\n        return res.json();\n      })\n      .then(data => {\n        if (Array.isArray(data) && data.length > 0) {\n          const prayerData = data[0];\n          \n          const formattedPrayers = {\n            city: prayerData.city,\n            country: prayerData.country,\n            prayers: {\n              Fajr: formatTime(prayerData.fajr),\n              Dhuhr: formatTime(prayerData.dhuhr),\n              Asr: formatTime(prayerData.asr),\n              Maghrib: formatTime(prayerData.maghrib),\n              Isha: formatTime(prayerData.isha)\n            }\n          };\n          \n          setPrayers(formattedPrayers);\n          const nextPrayer = determineNextPrayer(formattedPrayers.prayers);\n          if (nextPrayer) {\n            setActiveTime(nextPrayer.name);\n            setNextPrayerName(nextPrayer.name);\n            updateCountdown(formattedPrayers.prayers[nextPrayer.name]);\n          }\n        } else {\n          throw new Error(\"No prayer data available\");\n        }\n        \n        setLoading(false);\n      })\n      .catch(err => {\n        console.error(\"API Error:\", err);\n        setError(err.message);\n        setLoading(false);\n      });\n  }, []);\n  \n  // Fetch prayer times for a specific city\n  const fetchPrayerTimesForCity = useCallback((cityId) => {\n    if (!cityId) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    fetch(`http://saad.local/api/prayers/${cityId}`)\n      .then(res => {\n        if (!res.ok) {\n          throw new Error('Failed to fetch prayer times for this city');\n        }\n        return res.json();\n      })\n      .then(prayerData => {\n        if (prayerData) {\n          const formattedPrayers = {\n            city: prayerData.city,\n            country: prayerData.country,\n            prayers: {\n              Fajr: formatTime(prayerData.fajr),\n              Dhuhr: formatTime(prayerData.dhuhr),\n              Asr: formatTime(prayerData.asr),\n              Maghrib: formatTime(prayerData.maghrib),\n              Isha: formatTime(prayerData.isha)\n            }\n          };\n          \n          setPrayers(formattedPrayers);\n          \n          // Get the next prayer time\n          const nextPrayer = determineNextPrayer(formattedPrayers.prayers);\n          if (nextPrayer) {\n            setActiveTime(nextPrayer.name);\n            setNextPrayerName(nextPrayer.name);\n            updateCountdown(formattedPrayers.prayers[nextPrayer.name]);\n          }\n        } else {\n          throw new Error(\"Invalid data format received\");\n        }\n        \n        setLoading(false);\n      })\n      .catch(err => {\n        console.error(\"API Error:\", err);\n        setError(err.message);\n        setLoading(false);\n      });\n  }, []);\n  \n  useEffect(() => {\n    fetchCities();\n    \n    document.body.className = theme;\n    \n    // Clear interval when component unmounts\n    return () => {\n      if (countdownIntervalRef.current) {\n        clearInterval(countdownIntervalRef.current);\n      }\n      document.body.className = \"\";\n    };\n  }, [theme, fetchCities]);\n  \n  // Format time from \"HH:MM:SS\" to \"HH:MM\"\n  const formatTime = (timeString) => {\n    if (!timeString) return \"\";\n    \n    if (timeString.includes(\":\")) {\n      const parts = timeString.split(\":\");\n      if (parts.length >= 2) {\n        return `${parts[0]}:${parts[1]}`;\n      }\n    }\n    \n    return timeString;\n  };\n\n  // Determine the next prayer time\n  const determineNextPrayer = (prayerTimes) => {\n    if (!prayerTimes) return null;\n    \n    const now = new Date();\n    const currentHour = now.getHours();\n    const currentMinute = now.getMinutes();\n    const currentTime = currentHour * 60 + currentMinute;\n    \n    let nextPrayer = null;\n    let minDiff = Infinity;\n    \n    for (const [name, time] of Object.entries(prayerTimes)) {\n      if (!time || typeof time !== 'string') continue;\n      \n      const parts = time.split(\":\");\n      if (parts.length < 2) continue;\n      \n      const [hour, minute] = parts.map(Number);\n      if (isNaN(hour) || isNaN(minute)) continue;\n      \n      const prayerTime = hour * 60 + minute;\n      \n      let diff = prayerTime - currentTime;\n      if (diff < 0) {\n        diff += 24 * 60;\n      }\n      \n      if (diff < minDiff) {\n        minDiff = diff;\n        nextPrayer = { name, time };\n      }\n    }\n    \n    return nextPrayer;\n  };\n\n  // Updated countdown function that clears previous intervals\n  const updateCountdown = (nextPrayerTime) => {\n    if (!nextPrayerTime) return;\n    \n    // Clear any existing interval\n    if (countdownIntervalRef.current) {\n      clearInterval(countdownIntervalRef.current);\n    }\n    \n    // Start a new interval\n    countdownIntervalRef.current = setInterval(() => {\n      const now = new Date();\n      const prayerTime = new Date();\n      \n      const parts = nextPrayerTime.split(\":\");\n      if (parts.length < 2) {\n        setTimeLeft(\"Invalid time format\");\n        clearInterval(countdownIntervalRef.current);\n        return;\n      }\n      \n      const [hour, minute] = parts.map(Number);\n      if (isNaN(hour) || isNaN(minute)) {\n        setTimeLeft(\"Invalid time values\");\n        clearInterval(countdownIntervalRef.current);\n        return;\n      }\n      \n      prayerTime.setHours(hour, minute, 0, 0);\n\n      // If the prayer time is earlier today, it means it's for tomorrow\n      if (prayerTime < now) {\n        prayerTime.setDate(prayerTime.getDate() + 1);\n      }\n\n      const diff = prayerTime - now;\n      if (diff <= 0) {\n        setTimeLeft(\"Prayer time!\");\n        \n        // Recalculate next prayer time after current one is reached\n        if (prayers) {\n          const nextPrayer = determineNextPrayer(prayers.prayers);\n          if (nextPrayer) {\n            setActiveTime(nextPrayer.name);\n            setNextPrayerName(nextPrayer.name);\n            updateCountdown(prayers.prayers[nextPrayer.name]);\n          }\n        }\n      } else {\n        const hours = Math.floor(diff / (1000 * 60 * 60));\n        const minutes = Math.floor((diff / (1000 * 60)) % 60);\n        const seconds = Math.floor((diff / 1000) % 60);\n        setTimeLeft(`${hours}h ${minutes}m ${seconds}s`);\n      }\n    }, 1000);\n  };\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  const refreshData = () => {\n    fetchCities();\n  };\n\n  // Modify the handlePrayerAdded function to ensure proper refresh\n  const handlePrayerAdded = () => {\n    setShowForm(false); // Hide the form\n    \n    // Add a small delay to ensure the backend has updated\n    setTimeout(() => {\n      fetchCities(); // Refresh the cities list\n    }, 500);\n  };\n  \n  // Toggle form visibility\n  const toggleForm = () => {\n    setShowForm(!showForm);\n  };\n\n  // Handle city selection change\n  const handleCityChange = (e) => {\n    const cityId = parseInt(e.target.value);\n    setSelectedCityId(cityId);\n    fetchPrayerTimesForCity(cityId);\n  };\n\n  if (loading && !prayers) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loader\"></div>\n        <p>Loading prayer times...</p>\n      </div>\n    );\n  }\n\n  if (error && !prayers) {\n    return (\n      <div className=\"error-container\">\n        <h2>Error</h2>\n        <p>{error}</p>\n        <button onClick={refreshData} className=\"refresh-btn\">Try Again</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`app-container ${theme}`}>\n      <header>\n        <h1>Ramadan Prayer Times</h1>\n        <div className=\"header-actions\">\n          <button onClick={toggleForm} className=\"form-toggle-btn\">\n            {showForm ? \"Hide Form\" : \"Add Prayer Times\"}\n          </button>\n          <button onClick={refreshData} className=\"refresh-btn\">Refresh</button>\n          <button onClick={toggleTheme} className=\"theme-btn\">\n            {theme === \"light\" ? \"Dark Mode\" : \"Light Mode\"}\n          </button>\n        </div>\n      </header>\n      \n      {/* Prayer Form */}\n      {showForm && (\n        <div className=\"form-section\">\n          <PrayerForm\n            onPrayerAdded={handlePrayerAdded}\n            onCancel={() => setShowForm(false)}\n          />\n        </div>\n      )}\n      \n      {/* City Selection Dropdown */}\n      {allCities.length > 0 && (\n        <div className=\"city-selector\">\n          <label htmlFor=\"city-select\">Select City: </label>\n          <select \n            id=\"city-select\" \n            value={selectedCityId || \"\"} \n            onChange={handleCityChange}\n            className=\"city-dropdown\"\n          >\n            {allCities.map(city => (\n              <option key={city.id} value={city.id}>\n                {city.city}, {city.country}\n              </option>\n            ))}\n          </select>\n        </div>\n      )}\n      \n      {prayers && (\n        <div className=\"content\">\n          <div className=\"location-info\">\n            <h2>{prayers.city}, {prayers.country}</h2>\n            <p className=\"date\">{new Date().toLocaleDateString(\"en-US\", { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>\n          </div>\n          \n          <div className=\"iftar-countdown\">\n            <h2>Time until {nextPrayerName}</h2>\n            <div className=\"countdown-display\">{timeLeft}</div>\n          </div>\n          \n          <div className=\"prayer-times-container\">\n            <h2>Prayer Times</h2>\n            <div className=\"prayer-times\">\n              {prayers && prayers.prayers && (\n                Object.entries(prayers.prayers).map(([name, time]) => (\n                  <div key={name} className={`prayer-time-card ${name === activeTime ? \"active\" : \"\"}`}>\n                    <div className=\"prayer-name\">{name}</div>\n                    <div className=\"prayer-time\">{time}</div>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n          \n          <footer>\n            <p>Ramadan Mubarak! 🌙</p>\n          </footer>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}