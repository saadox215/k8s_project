{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus VivoBook F1605P\\\\Desktop\\\\projet_k8s\\\\mongo-express-app\\\\frontend\\\\src\\\\App.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\"; // We'll create this file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s2();\n  const [prayers, setPrayers] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(\"\");\n  const [activeTime, setActiveTime] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [theme, setTheme] = useState(\"light\");\n  useEffect(() => {\n    fetchPrayerTimes();\n\n    // Apply theme class to body\n    document.body.className = theme;\n    return () => {\n      document.body.className = \"body\";\n    };\n  }, [theme]);\n  const fetchPrayerTimes = () => {\n    var _s = $RefreshSig$();\n    setLoading(true);\n    setError(null);\n\n    // For testing purposes, use mock data if the API fails\n    const useMockData = () => {\n      console.log(\"Using mock data\");\n      const mockData = {\n        city: \"Mock City\",\n        country: \"Mock Country\",\n        prayers: {\n          Fajr: \"04:30\",\n          Sunrise: \"06:15\",\n          Dhuhr: \"12:30\",\n          Asr: \"15:45\",\n          Maghrib: \"18:45\",\n          Isha: \"20:15\"\n        }\n      };\n      processData(mockData);\n    };\n\n    // Process data regardless of format\n    const processData = data => {\n      console.log(\"Processing data:\", data);\n      try {\n        // Attempt to normalize the data structure\n        let normalizedData = {\n          prayers: {}\n        };\n\n        // Case 1: Direct object with prayers property\n        if (data && typeof data === 'object' && data.prayers && typeof data.prayers === 'object') {\n          normalizedData = data;\n        }\n        // Case 2: Array format, take first item\n        else if (Array.isArray(data) && data.length > 0 && data[0].prayers) {\n          normalizedData = data[0];\n        }\n        // Case 3: Direct prayer times object (no nested prayers property)\n        else if (data && typeof data === 'object' && !data.prayers) {\n          // Check if it looks like a prayer times object (has typical prayer names)\n          const prayerNames = [\"Fajr\", \"Sunrise\", \"Dhuhr\", \"Asr\", \"Maghrib\", \"Isha\"];\n          const hasPrayerTimes = prayerNames.some(name => typeof data[name] === 'string');\n          if (hasPrayerTimes) {\n            normalizedData.prayers = data;\n            normalizedData.city = data.city || \"Unknown\";\n            normalizedData.country = data.country || \"Location\";\n          } else {\n            throw new Error(\"Unrecognized data format\");\n          }\n        } else {\n          throw new Error(\"Invalid data format\");\n        }\n        setPrayers(normalizedData);\n        if (normalizedData.prayers) {\n          determineActiveTime(normalizedData.prayers);\n\n          // Use Maghrib time for Iftar, fallback to a default time if not available\n          const iftarTime = normalizedData.prayers.Maghrib || normalizedData.prayers.maghrib || \"18:30\";\n          startCountdown(iftarTime);\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Data processing error:\", err);\n        setError(err.message || \"Failed to process prayer times data\");\n        setLoading(false);\n      }\n    };\n\n    // Attempt to fetch from API\n    _s(fetch(\"http://localhost:5000/api/prayers\").then(res => {\n      if (!res.ok) {\n        throw new Error('Failed to fetch prayer times');\n      }\n      return res.json();\n    }).then(data => {\n      processData(data);\n    }).catch(_s(err => {\n      _s();\n      console.error(\"Fetch error:\", err);\n      // If in development mode, use mock data instead of showing error\n      if (process.env.NODE_ENV === 'development') {\n        useMockData();\n      } else {\n        setError(err.message || \"Failed to fetch prayer times\");\n        setLoading(false);\n      }\n    }, \"HGSSguUwuOvFDfn7ISIbiae8Ckk=\", false, function () {\n      return [useMockData];\n    })), \"HGSSguUwuOvFDfn7ISIbiae8Ckk=\", false, function () {\n      return [useMockData];\n    });\n  };\n  const determineActiveTime = prayerTimes => {\n    if (!prayerTimes || typeof prayerTimes !== 'object') {\n      console.error(\"Invalid prayer times for active time determination\");\n      return;\n    }\n    try {\n      const now = new Date();\n      const currentHour = now.getHours();\n      const currentMinute = now.getMinutes();\n      const currentTime = currentHour * 60 + currentMinute;\n      let nextPrayer = null;\n      let minDiff = Infinity;\n      Object.entries(prayerTimes).forEach(([name, time]) => {\n        if (typeof time === 'string' && time.includes(':')) {\n          const [hour, minute] = time.split(\":\").map(Number);\n          const prayerTime = hour * 60 + minute;\n\n          // Find the next prayer time\n          let diff = prayerTime - currentTime;\n          if (diff < 0) {\n            diff += 24 * 60; // Add 24 hours if prayer time has passed today\n          }\n          if (diff < minDiff) {\n            minDiff = diff;\n            nextPrayer = name;\n          }\n        }\n      });\n      setActiveTime(nextPrayer || Object.keys(prayerTimes)[0] || \"\");\n    } catch (err) {\n      console.error(\"Error determining active time:\", err);\n    }\n  };\n  const startCountdown = iftarTime => {\n    if (!iftarTime || typeof iftarTime !== 'string' || !iftarTime.includes(':')) {\n      setTimeLeft(\"Iftar time unavailable\");\n      return () => {};\n    }\n    const interval = setInterval(() => {\n      try {\n        const now = new Date();\n        const iftar = new Date();\n        const [hour, minute] = iftarTime.split(\":\").map(Number);\n        iftar.setHours(hour, minute, 0, 0);\n        const diff = iftar - now;\n        if (diff <= 0) {\n          setTimeLeft(\"Iftar time!\");\n          clearInterval(interval);\n        } else {\n          const hours = Math.floor(diff / (1000 * 60 * 60));\n          const minutes = Math.floor(diff / (1000 * 60) % 60);\n          const seconds = Math.floor(diff / 1000 % 60);\n          setTimeLeft(`${hours}h ${minutes}m ${seconds}s`);\n        }\n      } catch (err) {\n        console.error(\"Countdown error:\", err);\n        setTimeLeft(\"Countdown error\");\n        clearInterval(interval);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  };\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n  const refreshData = () => {\n    fetchPrayerTimes();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading prayer times...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: refreshData,\n        className: \"refresh-btn\",\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${theme}`,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ramadan Prayer Times\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: refreshData,\n          className: \"refresh-btn\",\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleTheme,\n          className: \"theme-btn\",\n          children: theme === \"light\" ? \"Dark Mode\" : \"Light Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), prayers && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [prayers.city || 'Unknown', \", \", prayers.country || 'Location']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"date\",\n          children: new Date().toLocaleDateString(\"en-US\", {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"iftar-countdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Time until Iftar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-display\",\n          children: timeLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prayer-times-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Prayer Times\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prayer-times\",\n          children: prayers && prayers.prayers && Object.keys(prayers.prayers).length > 0 ? Object.entries(prayers.prayers).map(([name, time]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `prayer-time-card ${name === activeTime ? \"active\" : \"\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"prayer-name\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"prayer-time\",\n              children: time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 21\n            }, this)]\n          }, name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-data\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No prayer times available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: refreshData,\n              className: \"refresh-btn\",\n              children: \"Try Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Ramadan Mubarak! \\uD83C\\uDF19\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"t6/myDr2Y5DwnkO2rYSkndk7JpM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s2","prayers","setPrayers","timeLeft","setTimeLeft","activeTime","setActiveTime","loading","setLoading","error","setError","theme","setTheme","fetchPrayerTimes","document","body","className","_s","$RefreshSig$","useMockData","console","log","mockData","city","country","Fajr","Sunrise","Dhuhr","Asr","Maghrib","Isha","processData","data","normalizedData","Array","isArray","length","prayerNames","hasPrayerTimes","some","name","Error","determineActiveTime","iftarTime","maghrib","startCountdown","err","message","fetch","then","res","ok","json","catch","process","env","NODE_ENV","prayerTimes","now","Date","currentHour","getHours","currentMinute","getMinutes","currentTime","nextPrayer","minDiff","Infinity","Object","entries","forEach","time","includes","hour","minute","split","map","Number","prayerTime","diff","keys","interval","setInterval","iftar","setHours","clearInterval","hours","Math","floor","minutes","seconds","toggleTheme","refreshData","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toLocaleDateString","weekday","year","month","day","_c","$RefreshReg$"],"sources":["C:/Users/Asus VivoBook F1605P/Desktop/projet_k8s/mongo-express-app/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\"; // We'll create this file for styling\n\nfunction App() {\n  const [prayers, setPrayers] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(\"\");\n  const [activeTime, setActiveTime] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [theme, setTheme] = useState(\"light\");\n\n  useEffect(() => {\n    fetchPrayerTimes();\n    \n    // Apply theme class to body\n    document.body.className = theme;\n    \n    return () => {\n      document.body.className = \"body\";\n    };\n  }, [theme]);\n  \n  const fetchPrayerTimes = () => {\n    setLoading(true);\n    setError(null);\n    \n    // For testing purposes, use mock data if the API fails\n    const useMockData = () => {\n      console.log(\"Using mock data\");\n      const mockData = {\n        city: \"Mock City\",\n        country: \"Mock Country\",\n        prayers: {\n          Fajr: \"04:30\",\n          Sunrise: \"06:15\",\n          Dhuhr: \"12:30\",\n          Asr: \"15:45\",\n          Maghrib: \"18:45\",\n          Isha: \"20:15\"\n        }\n      };\n      processData(mockData);\n    };\n    \n    // Process data regardless of format\n    const processData = (data) => {\n      console.log(\"Processing data:\", data);\n      \n      try {\n        // Attempt to normalize the data structure\n        let normalizedData = { prayers: {} };\n        \n        // Case 1: Direct object with prayers property\n        if (data && typeof data === 'object' && data.prayers && typeof data.prayers === 'object') {\n          normalizedData = data;\n        } \n        // Case 2: Array format, take first item\n        else if (Array.isArray(data) && data.length > 0 && data[0].prayers) {\n          normalizedData = data[0];\n        }\n        // Case 3: Direct prayer times object (no nested prayers property)\n        else if (data && typeof data === 'object' && !data.prayers) {\n          // Check if it looks like a prayer times object (has typical prayer names)\n          const prayerNames = [\"Fajr\", \"Sunrise\", \"Dhuhr\", \"Asr\", \"Maghrib\", \"Isha\"];\n          const hasPrayerTimes = prayerNames.some(name => typeof data[name] === 'string');\n          \n          if (hasPrayerTimes) {\n            normalizedData.prayers = data;\n            normalizedData.city = data.city || \"Unknown\";\n            normalizedData.country = data.country || \"Location\";\n          } else {\n            throw new Error(\"Unrecognized data format\");\n          }\n        } else {\n          throw new Error(\"Invalid data format\");\n        }\n        \n        setPrayers(normalizedData);\n        \n        if (normalizedData.prayers) {\n          determineActiveTime(normalizedData.prayers);\n          \n          // Use Maghrib time for Iftar, fallback to a default time if not available\n          const iftarTime = normalizedData.prayers.Maghrib || normalizedData.prayers.maghrib || \"18:30\";\n          startCountdown(iftarTime);\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        console.error(\"Data processing error:\", err);\n        setError(err.message || \"Failed to process prayer times data\");\n        setLoading(false);\n      }\n    };\n    \n    // Attempt to fetch from API\n    fetch(\"http://localhost:5000/api/prayers\")\n      .then(res => {\n        if (!res.ok) {\n          throw new Error('Failed to fetch prayer times');\n        }\n        return res.json();\n      })\n      .then(data => {\n        processData(data);\n      })\n      .catch(err => {\n        console.error(\"Fetch error:\", err);\n        // If in development mode, use mock data instead of showing error\n        if (process.env.NODE_ENV === 'development') {\n          useMockData();\n        } else {\n          setError(err.message || \"Failed to fetch prayer times\");\n          setLoading(false);\n        }\n      });\n  };\n\n  const determineActiveTime = (prayerTimes) => {\n    if (!prayerTimes || typeof prayerTimes !== 'object') {\n      console.error(\"Invalid prayer times for active time determination\");\n      return;\n    }\n    \n    try {\n      const now = new Date();\n      const currentHour = now.getHours();\n      const currentMinute = now.getMinutes();\n      const currentTime = currentHour * 60 + currentMinute;\n      \n      let nextPrayer = null;\n      let minDiff = Infinity;\n      \n      Object.entries(prayerTimes).forEach(([name, time]) => {\n        if (typeof time === 'string' && time.includes(':')) {\n          const [hour, minute] = time.split(\":\").map(Number);\n          const prayerTime = hour * 60 + minute;\n          \n          // Find the next prayer time\n          let diff = prayerTime - currentTime;\n          if (diff < 0) {\n            diff += 24 * 60; // Add 24 hours if prayer time has passed today\n          }\n          \n          if (diff < minDiff) {\n            minDiff = diff;\n            nextPrayer = name;\n          }\n        }\n      });\n      \n      setActiveTime(nextPrayer || Object.keys(prayerTimes)[0] || \"\");\n    } catch (err) {\n      console.error(\"Error determining active time:\", err);\n    }\n  };\n\n  const startCountdown = (iftarTime) => {\n    if (!iftarTime || typeof iftarTime !== 'string' || !iftarTime.includes(':')) {\n      setTimeLeft(\"Iftar time unavailable\");\n      return () => {};\n    }\n    \n    const interval = setInterval(() => {\n      try {\n        const now = new Date();\n        const iftar = new Date();\n        const [hour, minute] = iftarTime.split(\":\").map(Number);\n        iftar.setHours(hour, minute, 0, 0);\n\n        const diff = iftar - now;\n        if (diff <= 0) {\n          setTimeLeft(\"Iftar time!\");\n          clearInterval(interval);\n        } else {\n          const hours = Math.floor(diff / (1000 * 60 * 60));\n          const minutes = Math.floor((diff / (1000 * 60)) % 60);\n          const seconds = Math.floor((diff / 1000) % 60);\n          setTimeLeft(`${hours}h ${minutes}m ${seconds}s`);\n        }\n      } catch (err) {\n        console.error(\"Countdown error:\", err);\n        setTimeLeft(\"Countdown error\");\n        clearInterval(interval);\n      }\n    }, 1000);\n    \n    return () => clearInterval(interval);\n  };\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  const refreshData = () => {\n    fetchPrayerTimes();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loader\"></div>\n        <p>Loading prayer times...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"error-container\">\n        <h2>Error</h2>\n        <p>{error}</p>\n        <button onClick={refreshData} className=\"refresh-btn\">Try Again</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`app-container ${theme}`}>\n      <header>\n        <h1>Ramadan Prayer Times</h1>\n        <div className=\"header-actions\">\n          <button onClick={refreshData} className=\"refresh-btn\">Refresh</button>\n          <button onClick={toggleTheme} className=\"theme-btn\">\n            {theme === \"light\" ? \"Dark Mode\" : \"Light Mode\"}\n          </button>\n        </div>\n      </header>\n      \n      {prayers && (\n        <div className=\"content\">\n          <div className=\"location-info\">\n            <h2>{prayers.city || 'Unknown'}, {prayers.country || 'Location'}</h2>\n            <p className=\"date\">{new Date().toLocaleDateString(\"en-US\", { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>\n          </div>\n          \n          <div className=\"iftar-countdown\">\n            <h2>Time until Iftar</h2>\n            <div className=\"countdown-display\">{timeLeft}</div>\n          </div>\n          \n          <div className=\"prayer-times-container\">\n            <h2>Prayer Times</h2>\n            <div className=\"prayer-times\">\n              {prayers && prayers.prayers && Object.keys(prayers.prayers).length > 0 ? (\n                Object.entries(prayers.prayers).map(([name, time]) => (\n                  <div key={name} className={`prayer-time-card ${name === activeTime ? \"active\" : \"\"}`}>\n                    <div className=\"prayer-name\">{name}</div>\n                    <div className=\"prayer-time\">{time}</div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"no-data\">\n                  <p>No prayer times available</p>\n                  <button onClick={refreshData} className=\"refresh-btn\">Try Again</button>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <footer>\n            <p>Ramadan Mubarak! 🌙</p>\n          </footer>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}